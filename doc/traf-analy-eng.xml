<?xml version="1.0" encoding="UTF-8"?>
<book xmlns="http://docbook.org/ns/docbook" version="5.1" xml:lang="hu"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude">
    <info>
        <title>Real-Time Traffic Analyzer</title>
        <subtitle>Robocar World Championship - Robocar Cloud</subtitle>
        <titleabbrev>RCTRA</titleabbrev>
        <authorgroup>
            <author>
                <personname>
                    <surname>Besenczi</surname>
                    <firstname>Renátó</firstname>
                </personname>
                <affiliation>
                    <shortaffil>Researcher</shortaffil>
                    <jobtitle>MSc student</jobtitle>
                    <orgname>University of Debrecen</orgname>
                    <orgdiv>Department of Information Technology</orgdiv>
                    <address>
                        <email>renato.besenczi@gmail.com</email>
                    </address>
                </affiliation>
            </author>
            <author>
                <personname>
                    <surname>Szilágyi</surname>
                    <firstname>Mihály</firstname>
                </personname>
                <affiliation>
                    <shortaffil>Researcher</shortaffil>
                    <jobtitle>BSc student</jobtitle>
                    <orgname>University of Debrecen</orgname>
                    <orgdiv>Department of IT Systems and Networks</orgdiv>
                    <address>
                        <email>szimih90@gmail.com</email>
                    </address>
                </affiliation>
            </author>
            <author>
                <personname>
                    <surname>Oniga</surname>
                    <firstname>István</firstname>
                </personname>
                <affiliation>
                    <shortaffil>Supervisior</shortaffil>
                    <jobtitle>Associate Professor</jobtitle>
                    <orgname>University of Debrecen</orgname>
                    <orgdiv>Department of IT Systems and Networks</orgdiv>
                    <address>
                        <email>oniga.istvan@inf.unideb.hu</email>
                    </address>
                </affiliation>
            </author>
        </authorgroup>
        <edition>Real-time Traffic Analyzer, v. 1.0</edition>
        <pubdate>2015</pubdate>
        <copyright>
            <year>2015</year>
            <holder>dr. Bátfai Norbert</holder>
            <holder>Szilágyi Mihály</holder>
            <holder>Besenczi Renátó</holder>
            <holder>dr. Oniga István</holder>
        </copyright>
        <legalnotice>
            <para>Robocar World Championship
            </para>
            <para>
                Robocar World Championship, Copyright (C) 2015, Norbert Bátfai. Ph.D., <email>batfai.norbert@inf.unideb.hu</email>
            </para>
            <para>
                This program is free software: you can redistribute it and/or modify
                it under the terms of the GNU General Public License as published by
                the Free Software Foundation, either version 3 of the License, or
                (at your option) any later version.
            </para>
            <para>
                This program is distributed in the hope that it will be useful,
                but WITHOUT ANY WARRANTY; without even the implied warranty of
                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                GNU General Public License for more details.
            </para>
            <para>
                You should have received a copy of the GNU General Public License
                along with this program.  If not, see
                <link xlink:href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</link>.
            </para>
        </legalnotice>
        <legalnotice>
            <para>Real-Time Traffic Analyzer
            </para>
            <para>
                Real-Time Traffic Analyzer, Copyright (C) 2015, Besenczi Renátó, <email>renato.besenczi@gmail.com</email>, 
                Szilágyi Mihály, <email>szimih90@gmail.com</email> and dr. Oniga István, <email>oniga.istvan@inf.unideb.hu</email>
            </para>
            <para>
                This program is free software: you can redistribute it and/or modify
                it under the terms of the GNU General Public License as published by
                the Free Software Foundation, either version 3 of the License, or
                (at your option) any later version.
            </para>
            <para>
                This program is distributed in the hope that it will be useful,
                but WITHOUT ANY WARRANTY; without even the implied warranty of
                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                GNU General Public License for more details.
            </para>
            <para>
                You should have received a copy of the GNU General Public License
                along with this program.  If not, see
                <link xlink:href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</link>.
            </para>
        </legalnotice>
        <revhistory>
            <revision>
                <revnumber>0.0.1</revnumber>
                <date>06-06-2015</date>
                <revremark>Initial document and system plan</revremark>
            </revision>
            <revision>
                <revnumber>1.0</revnumber>
                <date>06-30-2015</date>
                <revremark>Content extended, XUP compatibility</revremark>
            </revision>
        </revhistory>
    </info>    

    <chapter>
        <info>
            <title>Introduction</title>
            <keywordset>
                <keyword></keyword>
            </keywordset>
        </info>
        <para>
            Robocar World Championship is intended to offer a common research platform for developing urban traffic control algorithms and for investigating the relationship between smart cities and robot cars with particular attention to spread of robot cars of the near future. At the heart of this initiative is the Robocar City Emulator. It will enable researchers to test and validate their theories and models.
        </para>
        <para>
            In the near future, driverless cars are expected to be ubiquitous. However,
            this fact can be arguable, because the future is uncertain. 
            We should note, for us this system is an initial abstraction with which we can start to build
            our research and development in the relationship between smart cities and self driving cars.
        </para>
        <para>
            Basically, the primary aim is to support university level education and research: we intended to 
            establish a platform which can be a de facto standard in the research of the connection between
            smart cities and self driving cars. (Somewhat similar with the 
            <link xlink:href="http://dl.acm.org/citation.cfm?doid=267658.267738">RCSS</link> initiative in
            the Artifical Intelligence research domain.) The Robocar World Championship (or OOCWC for short) is a competition for 
            routing algorithms which can be interpreted on an exact city (for example New York or London).
        </para>
        <para>
            Moreover, the most important aim is to support programming classes in education.
        </para>            
        <para>
            Our further aim is to establish an open platform for industial applications. 
            The Robocar City Emulator is an emulator in the aspect of routing algorithms. The emulator uses
            measured data as input and a route between two points can be considered as output.
        </para>
        <para>
            Further information about the system can be obtained <link xlink:href="https://github.com/nbatfai/robocar-emulator">here</link>
        </para>
        <para>
            The input of the Robocar City Emulator consists of the measured and estimated data of road loads. 
            We can measure this data in different ways. Besides the crowd sourcing methods (e.g. with a mobile phone application)
            an automatic way (without the need of human interaction) is plausible.
            The system discussed below is considered as an automatic measuring system for the input of the Robocar City Emulator.
        </para>
        <para>
            Competition plays an essential role in the Robocar World Championship initiative. This competition does not only manifest
            in the level of algorithms, but in the implementation level (e.g. prototypes) of the system. Many versions have already been made, the main branch can 
            be found <link xlink:href="https://github.com/nbatfai/robocar-emulator">here</link>. The system discussed below is considered
            as a branch fork of the main implementation and is not a part of the main, original implementation of the Robocar 
            World Championship.
        </para>
    </chapter>
    <chapter>
        <info>
            <title>Design</title>
            <keywordset>
                <keyword></keyword>
            </keywordset>
        </info>
        <section>
            <title>Requirements</title>
            <para>
                System requirements:
                <itemizedlist mark='opencircle'>
                    <listitem>
                        <para>
                            Real-time image processing.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Real-time data connectivity with a cloud based database solution.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Accurate positioning.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Easy installation into cars.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                The first three requirements are satisfied. The system can measure traffic density on roads, obtain an accurate position
                with the GPS, and send aggregated data structure to our Java based TCP server. However, we have not yet designed 
                a console (or box) for the system, so we can't install it into cars. After the testing process finishes, we intented
                to investigate the possibilities how can such a console be installed into cars.
            </para>
        </section>
        <section>
            <title>Hardware</title>
            <para>
                Because this project is mainly a research project, different kind of implementations are planned to realized.
                The first type of our hardware design is an ARM based
                solution. In this type, we use the advantages of the FPGA,
                mainly for I/O and memory management. The ARM gives us
                a standard option to perform calculations and image processing. 
                This kind of hardware development can take place on
                development boards. The main advantage of this type is that
                we can use an Embedded Linux System, so the high level
                processing tasks can be developed in a standard Linux/UNIX
                environment. Another solution is based on a soft-processor. In this type
                we do not have a physical processor, only an FPGA, so we
                should add a pre-defined one to our hardware design (e.g. a
                Xilinx MicroBlaze). In this case we must specify the operation
                of the processor, however its instruction set is poorly defined.
                The third type of solution has no processor at all, only a pure
                FPGA design. The whole process, including the I/O handling,
                image processing and some basic analytics is performed by an
                FPGA. Certainly, this solution gives us the fastest processing
                speed, but its development is more complicated.
                In this project, we have implemented the ARM based, Embedded System version.
            </para>
            <section>
                <title>Hardware design</title>
                <para>
                    In our project, we needed a device which is much more flexible than a single board PC (e.g. Raspberry Pi).
                    This flexibility gives us the ability to customize every periphery (camera, GPS, etc.) for our requirements.
                    Besides, we are intended to use a Linux based system for running our application.
                    The Zynq SoC have the above mentioned abilities. For the development we used 
                    the Xilinx Vivado™ Design Suite WebPACK version 2014.4.
                </para>
                <figure>
                    <title>Hardware design</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/base_design_1.jpg" scale="25"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                Hardware design
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>      
                <para>
                    The base design is quite simple, but contains our own components. The main component is a ZYNQ Processing System
                    and a Processor System Reset. In the project we connected the devices through the AXI bus. Two main components
                    are the two UartLite serial port. The GPS device is connected to the axi_uartlite_0 serial port which delivers
                    the NMEA data with 4800 baud rate (1 PPS data). We can communicate with the GSM device through the 
                    axi_uartlite_1 serial port with 115200 baud rate. The ov7670_top_0 component reads the data from the camera module
                    and transforms it into AXI Stream. The axi_wdma_0 loads the camera data into the memory through the 
                    axi_interconnect_0 module.
                </para>
                <para>
                    The communication between the peripherials are handled by the AXI bus. This bus has a 100MHz default clock rate.
                    To deliver the camera data into memory we set a 150MHz secondary clock rate.
                </para>
                <para>
                    We use Video Direct Memory Access to deliver video stream into the memory. The video stream has resolution of
                    640x480. The VDMA can be utilized easily and thanks for the Linux driver we could easily integrated it into our 
                    development. In the beginning of the development process we found very hard to apply VDMA. In order to 
                    overcome these difficulties we applied a simple model in which we used a module which creates a 
                    TestPattern constant image. More info can be found 
                    <link xlink:href="http://www.xilinx.com/products/intellectual-property/axi_video_dma.html">here</link>.
                </para>
                <figure>
                    <title>VDMA test design</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/vdma_test.jpg" scale="15"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                VDMA test
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>
                <figure>
                    <title>The final hardware design</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/currentsys.jpg" scale="45"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                The final hardware design
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>
            </section>
            <section>
                <title>Digilent Zybo</title>
                <para>
                    For development we used a Digilent Zybo board. More information can be found 
                    <link xlink:href="https://www.digilentinc.com/Products/Detail.cfm?Prod=ZYBO">here</link>.
                </para>
                <figure>
                    <title>Digilent Zybo</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/zybo.png" scale="45"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                Digilent Zybo
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>
            </section>
            <section>
                <title>Devices</title>
                <para>
                    For our purposes the Vincotech’s A1080-A GPS reciever seems suitable. It needs minimal external components 
                    and communicates on a simple serial port. The module sends NMEA data in 1 PPS time period. This NMEA data 
                    is processed by our application running on the Embedded Linux System. Speed, 
                    time and position is important for us. The power delivered by the PMOD interface was sufficient for this module.
                </para>
                <figure>
                    <title>GPS</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/gps.jpg" scale="15"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                Wired GPS module
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>                
                <figure>
                    <title>GPS</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/gps_c.jpg" scale="15"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                GPS module connected to ZYBO
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>    
                <para>
                    We applied a SIM900 GSM module for GPRS communication. Since this module needs 5V input we could easily 
                    connect it to the inner power switch of the ZYBO board. Fortunately, the power plug could handle the module,
                    the initial peak in this kind of setting is usually a critical point. In the future, we must pay attention
                    when applying in cars.
                </para>
                <figure>
                    <title>GSM</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/gsm.jpg" scale="8"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                GSM module connected ZYBO
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>  
                <para>
                    For image acquisition we wanted to use a customizable device rather than a USB webcamera. We have chosen the
                    OV 7670 module because it is easily accessible and its maximum resolution (640x480) is sufficient for our
                    purposes. The main advantage of this module is that we can set its properties, so the video stream can
                    meet our requirements. Thus, the input data can manipulated easier and the processor has a lower load.
                    Currently, we do not perform pre-processing, but we are planning to integrate a HLS-based OpenCV solution.
                </para>              
                <figure>
                    <title>Camera module</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/cam.jpg" scale="15"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                OV7670 Camera module
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>   
                <para> 
                    Our further plan is to use the CAN bus integrated in the ZYNQ SoC. With this module we can obtain further
                    information about the vehicles, for example speed, fuel consumption, etc.
                </para>             
                <figure>
                    <title>CAN bus</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/can_bus.jpg" scale="15"/>
                        </imageobject>
                        <textobject>
                            <phrase>
                                CAN bus
                            </phrase>
                        </textobject>
                    </mediaobject>
                </figure>
            </section>
        </section>
        <section>
            <title>Software</title>
            <para>
                Our software consists of three different modules. The GPS module parses the NMEA data and stores it in a structure.
                The openCV module performs image processing, which will described later in this chapter.
                The GSM module initializes the GPRS connection, opens a TCP connection between itself and the server, and sends the information
                in our predefined Google Protocol Buffers data structure (also described later).
                The software is implemented in C++, with POSIX Threads, one for each module.
                Thanks for the Linux system, every peripherials can be read like we read from a file.
            </para>
            <section>
                <title>Image processing</title>
                <para>
                    Our image processing method is an object detection based on Haar-cascade classification. 
                    See more information <link xlink:href="http://www.merl.com/publications/docs/TR2004-043.pdf">in this paper</link>.
                    The OpenCV library provides a standard solution for this kind of object detection. (For more, follow 
                    <link xlink:href="http://docs.opencv.org/modules/objdetect/doc/cascade_classification.html">this</link> link.)
                    This method has great performance in object detection, see:
                    <link xlink:href="http://videoanalysis.org/Prof._Dr._Rainer_Lienhart/Publications_files/MRL-TR-May02-revised-Dec02.pdf">this</link>, or
                    <link xlink:href="http://adamschmidt.info/assets/Uploads/performance.pdf">this</link>.
                    We obtained the pre-trained cascade file from <link xlink:href="http://www.cs.utah.edu/~turcsans/DUC/">School of Computing, University of Utah</link>.
                    
                </para>
            </section>
            <section>
                <title>Google Protocol Buffers data structure</title>
                <para>
                    We have created our own data structure, which can be found in the src/ subdirectory of the project.
                    For more information, please visit
                    <link xlink:href="https://developers.google.com/protocol-buffers/">this</link> link.
                </para>
            </section>
            <section>
                <title>Java TCP Server</title>
                <para>
                    For debugging purposes we have implemented our own TCP Server which can parse and list the data sent by the 
                    Real-time Traffic Analyzer.
                </para>
            </section>
        </section>
        <section>
            <title>Design reuse</title>
            <para>
                The Real-time Traffic Analyzer project is licensed under the GNU GPLv3 and can be found on 
                <link xlink:href="https://github.com/rbesenczi/real-time-traffic-analyzer">Github</link>.
            </para>
        </section>
    </chapter>
    <chapter>
        <info>
            <title>Results</title>
            <keywordset>
                <keyword></keyword>
            </keywordset>
        </info>
        <section>
            <title>Challenging issues</title>
            <para>
                For those who develop in Vivado for the first time, like us, is really difficult to see this different
                perspective of the hardware development. (Especially, after years of experience in the Xilinx ISE.)
                Besides, after the Spartan 3/6 series, the ZYNQ SoC has its own difficulties. After gaining some experience
                with the development environment it seems easier.
                However, the most difficult part was the insufficient descriptions of Linux distributions applied in 
                Embedded Systems. To run such a distribution is quite simple, but modifying it is a combersome
                task. (For example to attach a peripherial into the device tree of the kernel is really difficult.)
                
                We can conclude that after the hard beginning we get familiar with the Vivado 
                and its hardware development process.
            </para>
        </section>
        <section>
            <title>Summary</title>
            <para>
                We have successfully implemented the Automatic Sensor Annotations part of the Robocar World Championship system,
                although several test should be performed. We also need a performance evaluation. Because we apply the agile 
                development methodology, this first prototype will change many times during the development process.
            </para>
        </section>
    </chapter>
    <chapter>
        <info>
            <title>Conclusion</title>
            <keywordset>
                <keyword></keyword>
            </keywordset>
        </info>
        <section>
            <title>System overview</title>
            <para>
                In this project, we have implemented an automatic data collector for traffic measuring. The system is based on
                a ZYNQ SoC, which runs an Embedded Linux System. Our software is able to give us traffic density values on roads,
                accurate time and position, and send to a server application via GPRS. The image processing method is based on 
                a Haar-cascade classifier object detection.
            </para>
        </section>
        <section>
            <title>Future work</title>
            <para>
                Our future plan is to widen the peripherial set for the device. We are planning to attach an LCD touchscreen,
                mainly for debugging purposes and to inform the driver about some events related to the measurement.
                After a testing phase and a performance evaluation we will reconsider the whole system and every module
                (hardware and software). We are also planning a solution to implement the image processing method on FPGA with
                the HLS.
            </para>
        </section>
    </chapter>
    <chapter>
        <info>
            <title>References</title>
            <keywordset>
                <keyword></keyword>
            </keywordset>
        </info>
        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    Robocar World Championship project homepage: 
                    <link xlink:href="https://github.com/nbatfai/robocar-emulator">https://github.com/nbatfai/robocar-emulator</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    RoboCup: The Robot World Cup Initiative:
                    <link xlink:href="http://dl.acm.org/citation.cfm?doid=267658.267738">http://dl.acm.org/citation.cfm?doid=267658.267738</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    N. Bátfai, R. Besenczi, A. Mamenyák, M. Ispány, OOCWC: The Robocar World Championship Initiative, 
                    The 13th International Conference on Telecommunications, 2015, (accepted manuscript)
                </para>
            </listitem>
            <listitem>
                <para>
                    AXI Video DMA (AXI VDMA):
                    <link xlink:href="http://www.xilinx.com/products/intellectual-property/axi_video_dma.html">http://www.xilinx.com/products/intellectual-property/axi_video_dma.html</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    Digilent Zybo:
                    <link xlink:href="https://www.digilentinc.com/Products/Detail.cfm?Prod=ZYBO">https://www.digilentinc.com/Products/Detail.cfm?Prod=ZYBO</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    Vincotech’s A1080-A GPS receiver:
                    <link xlink:href="https://www.libelium.com/forum/libelium_files/GPS%20Receiver%20A1080%20V4.2.pdf">https://www.libelium.com/forum/libelium_files/GPS%20Receiver%20A1080%20V4.2.pdf</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    SIM900 GSM module:
                    <link xlink:href="http://wm.sim.com/producten.aspx?id=1019">http://wm.sim.com/producten.aspx?id=1019</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    OV 7670 camera module:
                    <link xlink:href="http://www.voti.nl/docs/OV7670.pdf">http://www.voti.nl/docs/OV7670.pdf</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    Google Protocol Buffers:
                    <link xlink:href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    Viola, P.; Jones, M.: Rapid Object Detection Using a Boosted Cascade of Simple Features, 
                    <link xlink:href="http://www.merl.com/publications/docs/TR2004-043.pdf">pdf</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    Haar Feature-based Cascade Classifier for Object Detection: 
                    <link xlink:href="http://docs.opencv.org/modules/objdetect/doc/cascade_classification.html">OpenCV Reference Manual</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    Rainer Lienhart, Alexander Kuranov, Vadim Pisarevsky, 
                    Empirical Analysis of Detection Cascades of Boosted Classifiers for Rapid Object Detection 
                    <link xlink:href="http://videoanalysis.org/Prof._Dr._Rainer_Lienhart/Publications_files/MRL-TR-May02-revised-Dec02.pdf">pdf</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    Adam Schmidt and Andrzej Kasinski,
                    The Performance of the Haar Cascade Classifiers Applied to the Face and Eyes Detection
                    <link xlink:href="http://adamschmidt.info/assets/Uploads/performance.pdf">pdf</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    Real-time Traffic Analyzer Github project homepage
                    <link xlink:href="https://github.com/rbesenczi/real-time-traffic-analyzer">https://github.com/rbesenczi/real-time-traffic-analyzer</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    YouTube demo video of the project
                    <link xlink:href="https://youtu.be/ECosPSNb8_Q">https://youtu.be/ECosPSNb8_Q</link>
                </para>
            </listitem>
        </itemizedlist> 
    </chapter>
</book>
