// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrafficAnalytics.proto

#ifndef PROTOBUF_TrafficAnalytics_2eproto__INCLUDED
#define PROTOBUF_TrafficAnalytics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TrafficAnalytics {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_TrafficAnalytics_2eproto();
void protobuf_AssignDesc_TrafficAnalytics_2eproto();
void protobuf_ShutdownFile_TrafficAnalytics_2eproto();

class TrafficAnalytics;

enum TrafficAnalytics_LatitudeNS {
  TrafficAnalytics_LatitudeNS_NORTH = 0,
  TrafficAnalytics_LatitudeNS_SOUTH = 1
};
bool TrafficAnalytics_LatitudeNS_IsValid(int value);
const TrafficAnalytics_LatitudeNS TrafficAnalytics_LatitudeNS_LatitudeNS_MIN = TrafficAnalytics_LatitudeNS_NORTH;
const TrafficAnalytics_LatitudeNS TrafficAnalytics_LatitudeNS_LatitudeNS_MAX = TrafficAnalytics_LatitudeNS_SOUTH;
const int TrafficAnalytics_LatitudeNS_LatitudeNS_ARRAYSIZE = TrafficAnalytics_LatitudeNS_LatitudeNS_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficAnalytics_LatitudeNS_descriptor();
inline const ::std::string& TrafficAnalytics_LatitudeNS_Name(TrafficAnalytics_LatitudeNS value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficAnalytics_LatitudeNS_descriptor(), value);
}
inline bool TrafficAnalytics_LatitudeNS_Parse(
    const ::std::string& name, TrafficAnalytics_LatitudeNS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficAnalytics_LatitudeNS>(
    TrafficAnalytics_LatitudeNS_descriptor(), name, value);
}
enum TrafficAnalytics_longitudeEW {
  TrafficAnalytics_longitudeEW_EAST = 0,
  TrafficAnalytics_longitudeEW_WEST = 1
};
bool TrafficAnalytics_longitudeEW_IsValid(int value);
const TrafficAnalytics_longitudeEW TrafficAnalytics_longitudeEW_longitudeEW_MIN = TrafficAnalytics_longitudeEW_EAST;
const TrafficAnalytics_longitudeEW TrafficAnalytics_longitudeEW_longitudeEW_MAX = TrafficAnalytics_longitudeEW_WEST;
const int TrafficAnalytics_longitudeEW_longitudeEW_ARRAYSIZE = TrafficAnalytics_longitudeEW_longitudeEW_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficAnalytics_longitudeEW_descriptor();
inline const ::std::string& TrafficAnalytics_longitudeEW_Name(TrafficAnalytics_longitudeEW value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficAnalytics_longitudeEW_descriptor(), value);
}
inline bool TrafficAnalytics_longitudeEW_Parse(
    const ::std::string& name, TrafficAnalytics_longitudeEW* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficAnalytics_longitudeEW>(
    TrafficAnalytics_longitudeEW_descriptor(), name, value);
}
// ===================================================================

class TrafficAnalytics : public ::google::protobuf::Message {
 public:
  TrafficAnalytics();
  virtual ~TrafficAnalytics();

  TrafficAnalytics(const TrafficAnalytics& from);

  inline TrafficAnalytics& operator=(const TrafficAnalytics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficAnalytics& default_instance();

  void Swap(TrafficAnalytics* other);

  // implements Message ----------------------------------------------

  inline TrafficAnalytics* New() const { return New(NULL); }

  TrafficAnalytics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficAnalytics& from);
  void MergeFrom(const TrafficAnalytics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficAnalytics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficAnalytics_LatitudeNS LatitudeNS;
  static const LatitudeNS NORTH = TrafficAnalytics_LatitudeNS_NORTH;
  static const LatitudeNS SOUTH = TrafficAnalytics_LatitudeNS_SOUTH;
  static inline bool LatitudeNS_IsValid(int value) {
    return TrafficAnalytics_LatitudeNS_IsValid(value);
  }
  static const LatitudeNS LatitudeNS_MIN =
    TrafficAnalytics_LatitudeNS_LatitudeNS_MIN;
  static const LatitudeNS LatitudeNS_MAX =
    TrafficAnalytics_LatitudeNS_LatitudeNS_MAX;
  static const int LatitudeNS_ARRAYSIZE =
    TrafficAnalytics_LatitudeNS_LatitudeNS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LatitudeNS_descriptor() {
    return TrafficAnalytics_LatitudeNS_descriptor();
  }
  static inline const ::std::string& LatitudeNS_Name(LatitudeNS value) {
    return TrafficAnalytics_LatitudeNS_Name(value);
  }
  static inline bool LatitudeNS_Parse(const ::std::string& name,
      LatitudeNS* value) {
    return TrafficAnalytics_LatitudeNS_Parse(name, value);
  }

  typedef TrafficAnalytics_longitudeEW longitudeEW;
  static const longitudeEW EAST = TrafficAnalytics_longitudeEW_EAST;
  static const longitudeEW WEST = TrafficAnalytics_longitudeEW_WEST;
  static inline bool longitudeEW_IsValid(int value) {
    return TrafficAnalytics_longitudeEW_IsValid(value);
  }
  static const longitudeEW longitudeEW_MIN =
    TrafficAnalytics_longitudeEW_longitudeEW_MIN;
  static const longitudeEW longitudeEW_MAX =
    TrafficAnalytics_longitudeEW_longitudeEW_MAX;
  static const int longitudeEW_ARRAYSIZE =
    TrafficAnalytics_longitudeEW_longitudeEW_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  longitudeEW_descriptor() {
    return TrafficAnalytics_longitudeEW_descriptor();
  }
  static inline const ::std::string& longitudeEW_Name(longitudeEW value) {
    return TrafficAnalytics_longitudeEW_Name(value);
  }
  static inline bool longitudeEW_Parse(const ::std::string& name,
      longitudeEW* value) {
    return TrafficAnalytics_longitudeEW_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string car_id = 1;
  bool has_car_id() const;
  void clear_car_id();
  static const int kCarIdFieldNumber = 1;
  const ::std::string& car_id() const;
  void set_car_id(const ::std::string& value);
  void set_car_id(const char* value);
  void set_car_id(const char* value, size_t size);
  ::std::string* mutable_car_id();
  ::std::string* release_car_id();
  void set_allocated_car_id(::std::string* car_id);

  // required string timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // required .TrafficAnalytics.TrafficAnalytics.LatitudeNS latitudens = 3;
  bool has_latitudens() const;
  void clear_latitudens();
  static const int kLatitudensFieldNumber = 3;
  ::TrafficAnalytics::TrafficAnalytics_LatitudeNS latitudens() const;
  void set_latitudens(::TrafficAnalytics::TrafficAnalytics_LatitudeNS value);

  // required double latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  double latitude() const;
  void set_latitude(double value);

  // required .TrafficAnalytics.TrafficAnalytics.longitudeEW longitudeew = 5;
  bool has_longitudeew() const;
  void clear_longitudeew();
  static const int kLongitudeewFieldNumber = 5;
  ::TrafficAnalytics::TrafficAnalytics_longitudeEW longitudeew() const;
  void set_longitudeew(::TrafficAnalytics::TrafficAnalytics_longitudeEW value);

  // required double longitude = 6;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 6;
  double longitude() const;
  void set_longitude(double value);

  // required double density = 7;
  bool has_density() const;
  void clear_density();
  static const int kDensityFieldNumber = 7;
  double density() const;
  void set_density(double value);

  // required uint32 vehicle_speed_gps = 8;
  bool has_vehicle_speed_gps() const;
  void clear_vehicle_speed_gps();
  static const int kVehicleSpeedGpsFieldNumber = 8;
  ::google::protobuf::uint32 vehicle_speed_gps() const;
  void set_vehicle_speed_gps(::google::protobuf::uint32 value);

  // optional uint32 vehicle_speed_can = 9;
  bool has_vehicle_speed_can() const;
  void clear_vehicle_speed_can();
  static const int kVehicleSpeedCanFieldNumber = 9;
  ::google::protobuf::uint32 vehicle_speed_can() const;
  void set_vehicle_speed_can(::google::protobuf::uint32 value);

  // optional uint32 fuel_level = 10;
  bool has_fuel_level() const;
  void clear_fuel_level();
  static const int kFuelLevelFieldNumber = 10;
  ::google::protobuf::uint32 fuel_level() const;
  void set_fuel_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TrafficAnalytics.TrafficAnalytics)
 private:
  inline void set_has_car_id();
  inline void clear_has_car_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_latitudens();
  inline void clear_has_latitudens();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitudeew();
  inline void clear_has_longitudeew();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_density();
  inline void clear_has_density();
  inline void set_has_vehicle_speed_gps();
  inline void clear_has_vehicle_speed_gps();
  inline void set_has_vehicle_speed_can();
  inline void clear_has_vehicle_speed_can();
  inline void set_has_fuel_level();
  inline void clear_has_fuel_level();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr car_id_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  double latitude_;
  int latitudens_;
  int longitudeew_;
  double longitude_;
  double density_;
  ::google::protobuf::uint32 vehicle_speed_gps_;
  ::google::protobuf::uint32 vehicle_speed_can_;
  ::google::protobuf::uint32 fuel_level_;
  friend void  protobuf_AddDesc_TrafficAnalytics_2eproto();
  friend void protobuf_AssignDesc_TrafficAnalytics_2eproto();
  friend void protobuf_ShutdownFile_TrafficAnalytics_2eproto();

  void InitAsDefaultInstance();
  static TrafficAnalytics* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficAnalytics

// required string car_id = 1;
inline bool TrafficAnalytics::has_car_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficAnalytics::set_has_car_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficAnalytics::clear_has_car_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficAnalytics::clear_car_id() {
  car_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_car_id();
}
inline const ::std::string& TrafficAnalytics::car_id() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.car_id)
  return car_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficAnalytics::set_car_id(const ::std::string& value) {
  set_has_car_id();
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.car_id)
}
inline void TrafficAnalytics::set_car_id(const char* value) {
  set_has_car_id();
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrafficAnalytics.TrafficAnalytics.car_id)
}
inline void TrafficAnalytics::set_car_id(const char* value, size_t size) {
  set_has_car_id();
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrafficAnalytics.TrafficAnalytics.car_id)
}
inline ::std::string* TrafficAnalytics::mutable_car_id() {
  set_has_car_id();
  // @@protoc_insertion_point(field_mutable:TrafficAnalytics.TrafficAnalytics.car_id)
  return car_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficAnalytics::release_car_id() {
  clear_has_car_id();
  return car_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficAnalytics::set_allocated_car_id(::std::string* car_id) {
  if (car_id != NULL) {
    set_has_car_id();
  } else {
    clear_has_car_id();
  }
  car_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_id);
  // @@protoc_insertion_point(field_set_allocated:TrafficAnalytics.TrafficAnalytics.car_id)
}

// required string timestamp = 2;
inline bool TrafficAnalytics::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficAnalytics::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficAnalytics::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficAnalytics::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& TrafficAnalytics::timestamp() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficAnalytics::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.timestamp)
}
inline void TrafficAnalytics::set_timestamp(const char* value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrafficAnalytics.TrafficAnalytics.timestamp)
}
inline void TrafficAnalytics::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrafficAnalytics.TrafficAnalytics.timestamp)
}
inline ::std::string* TrafficAnalytics::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:TrafficAnalytics.TrafficAnalytics.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficAnalytics::release_timestamp() {
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficAnalytics::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:TrafficAnalytics.TrafficAnalytics.timestamp)
}

// required .TrafficAnalytics.TrafficAnalytics.LatitudeNS latitudens = 3;
inline bool TrafficAnalytics::has_latitudens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficAnalytics::set_has_latitudens() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficAnalytics::clear_has_latitudens() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficAnalytics::clear_latitudens() {
  latitudens_ = 0;
  clear_has_latitudens();
}
inline ::TrafficAnalytics::TrafficAnalytics_LatitudeNS TrafficAnalytics::latitudens() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.latitudens)
  return static_cast< ::TrafficAnalytics::TrafficAnalytics_LatitudeNS >(latitudens_);
}
inline void TrafficAnalytics::set_latitudens(::TrafficAnalytics::TrafficAnalytics_LatitudeNS value) {
  assert(::TrafficAnalytics::TrafficAnalytics_LatitudeNS_IsValid(value));
  set_has_latitudens();
  latitudens_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.latitudens)
}

// required double latitude = 4;
inline bool TrafficAnalytics::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficAnalytics::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficAnalytics::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficAnalytics::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double TrafficAnalytics::latitude() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.latitude)
  return latitude_;
}
inline void TrafficAnalytics::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.latitude)
}

// required .TrafficAnalytics.TrafficAnalytics.longitudeEW longitudeew = 5;
inline bool TrafficAnalytics::has_longitudeew() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficAnalytics::set_has_longitudeew() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficAnalytics::clear_has_longitudeew() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficAnalytics::clear_longitudeew() {
  longitudeew_ = 0;
  clear_has_longitudeew();
}
inline ::TrafficAnalytics::TrafficAnalytics_longitudeEW TrafficAnalytics::longitudeew() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.longitudeew)
  return static_cast< ::TrafficAnalytics::TrafficAnalytics_longitudeEW >(longitudeew_);
}
inline void TrafficAnalytics::set_longitudeew(::TrafficAnalytics::TrafficAnalytics_longitudeEW value) {
  assert(::TrafficAnalytics::TrafficAnalytics_longitudeEW_IsValid(value));
  set_has_longitudeew();
  longitudeew_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.longitudeew)
}

// required double longitude = 6;
inline bool TrafficAnalytics::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrafficAnalytics::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrafficAnalytics::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrafficAnalytics::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double TrafficAnalytics::longitude() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.longitude)
  return longitude_;
}
inline void TrafficAnalytics::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.longitude)
}

// required double density = 7;
inline bool TrafficAnalytics::has_density() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrafficAnalytics::set_has_density() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrafficAnalytics::clear_has_density() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrafficAnalytics::clear_density() {
  density_ = 0;
  clear_has_density();
}
inline double TrafficAnalytics::density() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.density)
  return density_;
}
inline void TrafficAnalytics::set_density(double value) {
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.density)
}

// required uint32 vehicle_speed_gps = 8;
inline bool TrafficAnalytics::has_vehicle_speed_gps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrafficAnalytics::set_has_vehicle_speed_gps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrafficAnalytics::clear_has_vehicle_speed_gps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrafficAnalytics::clear_vehicle_speed_gps() {
  vehicle_speed_gps_ = 0u;
  clear_has_vehicle_speed_gps();
}
inline ::google::protobuf::uint32 TrafficAnalytics::vehicle_speed_gps() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.vehicle_speed_gps)
  return vehicle_speed_gps_;
}
inline void TrafficAnalytics::set_vehicle_speed_gps(::google::protobuf::uint32 value) {
  set_has_vehicle_speed_gps();
  vehicle_speed_gps_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.vehicle_speed_gps)
}

// optional uint32 vehicle_speed_can = 9;
inline bool TrafficAnalytics::has_vehicle_speed_can() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrafficAnalytics::set_has_vehicle_speed_can() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrafficAnalytics::clear_has_vehicle_speed_can() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrafficAnalytics::clear_vehicle_speed_can() {
  vehicle_speed_can_ = 0u;
  clear_has_vehicle_speed_can();
}
inline ::google::protobuf::uint32 TrafficAnalytics::vehicle_speed_can() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.vehicle_speed_can)
  return vehicle_speed_can_;
}
inline void TrafficAnalytics::set_vehicle_speed_can(::google::protobuf::uint32 value) {
  set_has_vehicle_speed_can();
  vehicle_speed_can_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.vehicle_speed_can)
}

// optional uint32 fuel_level = 10;
inline bool TrafficAnalytics::has_fuel_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrafficAnalytics::set_has_fuel_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrafficAnalytics::clear_has_fuel_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrafficAnalytics::clear_fuel_level() {
  fuel_level_ = 0u;
  clear_has_fuel_level();
}
inline ::google::protobuf::uint32 TrafficAnalytics::fuel_level() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.fuel_level)
  return fuel_level_;
}
inline void TrafficAnalytics::set_fuel_level(::google::protobuf::uint32 value) {
  set_has_fuel_level();
  fuel_level_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.fuel_level)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace TrafficAnalytics

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TrafficAnalytics::TrafficAnalytics_LatitudeNS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TrafficAnalytics::TrafficAnalytics_LatitudeNS>() {
  return ::TrafficAnalytics::TrafficAnalytics_LatitudeNS_descriptor();
}
template <> struct is_proto_enum< ::TrafficAnalytics::TrafficAnalytics_longitudeEW> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TrafficAnalytics::TrafficAnalytics_longitudeEW>() {
  return ::TrafficAnalytics::TrafficAnalytics_longitudeEW_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TrafficAnalytics_2eproto__INCLUDED
