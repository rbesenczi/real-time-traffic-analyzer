// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrafficAnalytics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrafficAnalytics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TrafficAnalytics {

namespace {

const ::google::protobuf::Descriptor* TrafficAnalytics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficAnalytics_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficAnalytics_LatitudeNS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficAnalytics_longitudeEW_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TrafficAnalytics_2eproto() {
  protobuf_AddDesc_TrafficAnalytics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TrafficAnalytics.proto");
  GOOGLE_CHECK(file != NULL);
  TrafficAnalytics_descriptor_ = file->message_type(0);
  static const int TrafficAnalytics_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, car_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, latitudens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, longitudeew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, vehicle_speed_gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, vehicle_speed_can_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, fuel_level_),
  };
  TrafficAnalytics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficAnalytics_descriptor_,
      TrafficAnalytics::default_instance_,
      TrafficAnalytics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficAnalytics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficAnalytics, _internal_metadata_),
      -1);
  TrafficAnalytics_LatitudeNS_descriptor_ = TrafficAnalytics_descriptor_->enum_type(0);
  TrafficAnalytics_longitudeEW_descriptor_ = TrafficAnalytics_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TrafficAnalytics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficAnalytics_descriptor_, &TrafficAnalytics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TrafficAnalytics_2eproto() {
  delete TrafficAnalytics::default_instance_;
  delete TrafficAnalytics_reflection_;
}

void protobuf_AddDesc_TrafficAnalytics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026TrafficAnalytics.proto\022\020TrafficAnalyti"
    "cs\"\204\003\n\020TrafficAnalytics\022\016\n\006car_id\030\001 \002(\t\022"
    "\021\n\ttimestamp\030\002 \002(\t\022A\n\nlatitudens\030\003 \002(\0162-"
    ".TrafficAnalytics.TrafficAnalytics.Latit"
    "udeNS\022\020\n\010latitude\030\004 \002(\001\022C\n\013longitudeew\030\005"
    " \002(\0162..TrafficAnalytics.TrafficAnalytics"
    ".longitudeEW\022\021\n\tlongitude\030\006 \002(\001\022\017\n\007densi"
    "ty\030\007 \002(\001\022\031\n\021vehicle_speed_gps\030\010 \002(\r\022\031\n\021v"
    "ehicle_speed_can\030\t \001(\r\022\022\n\nfuel_level\030\n \001"
    "(\r\"\"\n\nLatitudeNS\022\t\n\005NORTH\020\000\022\t\n\005SOUTH\020\001\"!"
    "\n\013longitudeEW\022\010\n\004EAST\020\000\022\010\n\004WEST\020\001B,\n\023hu."
    "TrafficAnalyticsB\025TrafficAnalyticsClass", 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TrafficAnalytics.proto", &protobuf_RegisterTypes);
  TrafficAnalytics::default_instance_ = new TrafficAnalytics();
  TrafficAnalytics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrafficAnalytics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrafficAnalytics_2eproto {
  StaticDescriptorInitializer_TrafficAnalytics_2eproto() {
    protobuf_AddDesc_TrafficAnalytics_2eproto();
  }
} static_descriptor_initializer_TrafficAnalytics_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* TrafficAnalytics_LatitudeNS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficAnalytics_LatitudeNS_descriptor_;
}
bool TrafficAnalytics_LatitudeNS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TrafficAnalytics_LatitudeNS TrafficAnalytics::NORTH;
const TrafficAnalytics_LatitudeNS TrafficAnalytics::SOUTH;
const TrafficAnalytics_LatitudeNS TrafficAnalytics::LatitudeNS_MIN;
const TrafficAnalytics_LatitudeNS TrafficAnalytics::LatitudeNS_MAX;
const int TrafficAnalytics::LatitudeNS_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TrafficAnalytics_longitudeEW_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficAnalytics_longitudeEW_descriptor_;
}
bool TrafficAnalytics_longitudeEW_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TrafficAnalytics_longitudeEW TrafficAnalytics::EAST;
const TrafficAnalytics_longitudeEW TrafficAnalytics::WEST;
const TrafficAnalytics_longitudeEW TrafficAnalytics::longitudeEW_MIN;
const TrafficAnalytics_longitudeEW TrafficAnalytics::longitudeEW_MAX;
const int TrafficAnalytics::longitudeEW_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TrafficAnalytics::kCarIdFieldNumber;
const int TrafficAnalytics::kTimestampFieldNumber;
const int TrafficAnalytics::kLatitudensFieldNumber;
const int TrafficAnalytics::kLatitudeFieldNumber;
const int TrafficAnalytics::kLongitudeewFieldNumber;
const int TrafficAnalytics::kLongitudeFieldNumber;
const int TrafficAnalytics::kDensityFieldNumber;
const int TrafficAnalytics::kVehicleSpeedGpsFieldNumber;
const int TrafficAnalytics::kVehicleSpeedCanFieldNumber;
const int TrafficAnalytics::kFuelLevelFieldNumber;
#endif  // !_MSC_VER

TrafficAnalytics::TrafficAnalytics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficAnalytics.TrafficAnalytics)
}

void TrafficAnalytics::InitAsDefaultInstance() {
}

TrafficAnalytics::TrafficAnalytics(const TrafficAnalytics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrafficAnalytics.TrafficAnalytics)
}

void TrafficAnalytics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  car_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitudens_ = 0;
  latitude_ = 0;
  longitudeew_ = 0;
  longitude_ = 0;
  density_ = 0;
  vehicle_speed_gps_ = 0u;
  vehicle_speed_can_ = 0u;
  fuel_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficAnalytics::~TrafficAnalytics() {
  // @@protoc_insertion_point(destructor:TrafficAnalytics.TrafficAnalytics)
  SharedDtor();
}

void TrafficAnalytics::SharedDtor() {
  car_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrafficAnalytics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficAnalytics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficAnalytics_descriptor_;
}

const TrafficAnalytics& TrafficAnalytics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrafficAnalytics_2eproto();
  return *default_instance_;
}

TrafficAnalytics* TrafficAnalytics::default_instance_ = NULL;

TrafficAnalytics* TrafficAnalytics::New(::google::protobuf::Arena* arena) const {
  TrafficAnalytics* n = new TrafficAnalytics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficAnalytics::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrafficAnalytics*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(latitude_, vehicle_speed_gps_);
    if (has_car_id()) {
      car_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(vehicle_speed_can_, fuel_level_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficAnalytics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficAnalytics.TrafficAnalytics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string car_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->car_id().data(), this->car_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrafficAnalytics.TrafficAnalytics.car_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // required string timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrafficAnalytics.TrafficAnalytics.timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_latitudens;
        break;
      }

      // required .TrafficAnalytics.TrafficAnalytics.LatitudeNS latitudens = 3;
      case 3: {
        if (tag == 24) {
         parse_latitudens:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TrafficAnalytics::TrafficAnalytics_LatitudeNS_IsValid(value)) {
            set_latitudens(static_cast< ::TrafficAnalytics::TrafficAnalytics_LatitudeNS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }

      // required double latitude = 4;
      case 4: {
        if (tag == 33) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_longitudeew;
        break;
      }

      // required .TrafficAnalytics.TrafficAnalytics.longitudeEW longitudeew = 5;
      case 5: {
        if (tag == 40) {
         parse_longitudeew:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TrafficAnalytics::TrafficAnalytics_longitudeEW_IsValid(value)) {
            set_longitudeew(static_cast< ::TrafficAnalytics::TrafficAnalytics_longitudeEW >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_longitude;
        break;
      }

      // required double longitude = 6;
      case 6: {
        if (tag == 49) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_density;
        break;
      }

      // required double density = 7;
      case 7: {
        if (tag == 57) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_vehicle_speed_gps;
        break;
      }

      // required uint32 vehicle_speed_gps = 8;
      case 8: {
        if (tag == 64) {
         parse_vehicle_speed_gps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_speed_gps_)));
          set_has_vehicle_speed_gps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vehicle_speed_can;
        break;
      }

      // optional uint32 vehicle_speed_can = 9;
      case 9: {
        if (tag == 72) {
         parse_vehicle_speed_can:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehicle_speed_can_)));
          set_has_vehicle_speed_can();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fuel_level;
        break;
      }

      // optional uint32 fuel_level = 10;
      case 10: {
        if (tag == 80) {
         parse_fuel_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuel_level_)));
          set_has_fuel_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficAnalytics.TrafficAnalytics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficAnalytics.TrafficAnalytics)
  return false;
#undef DO_
}

void TrafficAnalytics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficAnalytics.TrafficAnalytics)
  // required string car_id = 1;
  if (has_car_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->car_id().data(), this->car_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrafficAnalytics.TrafficAnalytics.car_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->car_id(), output);
  }

  // required string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrafficAnalytics.TrafficAnalytics.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  // required .TrafficAnalytics.TrafficAnalytics.LatitudeNS latitudens = 3;
  if (has_latitudens()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->latitudens(), output);
  }

  // required double latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // required .TrafficAnalytics.TrafficAnalytics.longitudeEW longitudeew = 5;
  if (has_longitudeew()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->longitudeew(), output);
  }

  // required double longitude = 6;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longitude(), output);
  }

  // required double density = 7;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->density(), output);
  }

  // required uint32 vehicle_speed_gps = 8;
  if (has_vehicle_speed_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vehicle_speed_gps(), output);
  }

  // optional uint32 vehicle_speed_can = 9;
  if (has_vehicle_speed_can()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vehicle_speed_can(), output);
  }

  // optional uint32 fuel_level = 10;
  if (has_fuel_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fuel_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrafficAnalytics.TrafficAnalytics)
}

::google::protobuf::uint8* TrafficAnalytics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrafficAnalytics.TrafficAnalytics)
  // required string car_id = 1;
  if (has_car_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->car_id().data(), this->car_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrafficAnalytics.TrafficAnalytics.car_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->car_id(), target);
  }

  // required string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrafficAnalytics.TrafficAnalytics.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  // required .TrafficAnalytics.TrafficAnalytics.LatitudeNS latitudens = 3;
  if (has_latitudens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->latitudens(), target);
  }

  // required double latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // required .TrafficAnalytics.TrafficAnalytics.longitudeEW longitudeew = 5;
  if (has_longitudeew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->longitudeew(), target);
  }

  // required double longitude = 6;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longitude(), target);
  }

  // required double density = 7;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->density(), target);
  }

  // required uint32 vehicle_speed_gps = 8;
  if (has_vehicle_speed_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vehicle_speed_gps(), target);
  }

  // optional uint32 vehicle_speed_can = 9;
  if (has_vehicle_speed_can()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vehicle_speed_can(), target);
  }

  // optional uint32 fuel_level = 10;
  if (has_fuel_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fuel_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrafficAnalytics.TrafficAnalytics)
  return target;
}

int TrafficAnalytics::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_car_id()) {
    // required string car_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car_id());
  }

  if (has_timestamp()) {
    // required string timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  if (has_latitudens()) {
    // required .TrafficAnalytics.TrafficAnalytics.LatitudeNS latitudens = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latitudens());
  }

  if (has_latitude()) {
    // required double latitude = 4;
    total_size += 1 + 8;
  }

  if (has_longitudeew()) {
    // required .TrafficAnalytics.TrafficAnalytics.longitudeEW longitudeew = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->longitudeew());
  }

  if (has_longitude()) {
    // required double longitude = 6;
    total_size += 1 + 8;
  }

  if (has_density()) {
    // required double density = 7;
    total_size += 1 + 8;
  }

  if (has_vehicle_speed_gps()) {
    // required uint32 vehicle_speed_gps = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_speed_gps());
  }

  return total_size;
}
int TrafficAnalytics::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string car_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car_id());

    // required string timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());

    // required .TrafficAnalytics.TrafficAnalytics.LatitudeNS latitudens = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latitudens());

    // required double latitude = 4;
    total_size += 1 + 8;

    // required .TrafficAnalytics.TrafficAnalytics.longitudeEW longitudeew = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->longitudeew());

    // required double longitude = 6;
    total_size += 1 + 8;

    // required double density = 7;
    total_size += 1 + 8;

    // required uint32 vehicle_speed_gps = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vehicle_speed_gps());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 vehicle_speed_can = 9;
    if (has_vehicle_speed_can()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vehicle_speed_can());
    }

    // optional uint32 fuel_level = 10;
    if (has_fuel_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuel_level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficAnalytics::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrafficAnalytics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficAnalytics>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficAnalytics::MergeFrom(const TrafficAnalytics& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_car_id()) {
      set_has_car_id();
      car_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_id_);
    }
    if (from.has_timestamp()) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (from.has_latitudens()) {
      set_latitudens(from.latitudens());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitudeew()) {
      set_longitudeew(from.longitudeew());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_vehicle_speed_gps()) {
      set_vehicle_speed_gps(from.vehicle_speed_gps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vehicle_speed_can()) {
      set_vehicle_speed_can(from.vehicle_speed_can());
    }
    if (from.has_fuel_level()) {
      set_fuel_level(from.fuel_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficAnalytics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficAnalytics::CopyFrom(const TrafficAnalytics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficAnalytics::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void TrafficAnalytics::Swap(TrafficAnalytics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficAnalytics::InternalSwap(TrafficAnalytics* other) {
  car_id_.Swap(&other->car_id_);
  timestamp_.Swap(&other->timestamp_);
  std::swap(latitudens_, other->latitudens_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitudeew_, other->longitudeew_);
  std::swap(longitude_, other->longitude_);
  std::swap(density_, other->density_);
  std::swap(vehicle_speed_gps_, other->vehicle_speed_gps_);
  std::swap(vehicle_speed_can_, other->vehicle_speed_can_);
  std::swap(fuel_level_, other->fuel_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficAnalytics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficAnalytics_descriptor_;
  metadata.reflection = TrafficAnalytics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficAnalytics

// required string car_id = 1;
bool TrafficAnalytics::has_car_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficAnalytics::set_has_car_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficAnalytics::clear_has_car_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficAnalytics::clear_car_id() {
  car_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_car_id();
}
 const ::std::string& TrafficAnalytics::car_id() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.car_id)
  return car_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficAnalytics::set_car_id(const ::std::string& value) {
  set_has_car_id();
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.car_id)
}
 void TrafficAnalytics::set_car_id(const char* value) {
  set_has_car_id();
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrafficAnalytics.TrafficAnalytics.car_id)
}
 void TrafficAnalytics::set_car_id(const char* value, size_t size) {
  set_has_car_id();
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrafficAnalytics.TrafficAnalytics.car_id)
}
 ::std::string* TrafficAnalytics::mutable_car_id() {
  set_has_car_id();
  // @@protoc_insertion_point(field_mutable:TrafficAnalytics.TrafficAnalytics.car_id)
  return car_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrafficAnalytics::release_car_id() {
  clear_has_car_id();
  return car_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficAnalytics::set_allocated_car_id(::std::string* car_id) {
  if (car_id != NULL) {
    set_has_car_id();
  } else {
    clear_has_car_id();
  }
  car_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_id);
  // @@protoc_insertion_point(field_set_allocated:TrafficAnalytics.TrafficAnalytics.car_id)
}

// required string timestamp = 2;
bool TrafficAnalytics::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficAnalytics::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficAnalytics::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficAnalytics::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
 const ::std::string& TrafficAnalytics::timestamp() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficAnalytics::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.timestamp)
}
 void TrafficAnalytics::set_timestamp(const char* value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrafficAnalytics.TrafficAnalytics.timestamp)
}
 void TrafficAnalytics::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrafficAnalytics.TrafficAnalytics.timestamp)
}
 ::std::string* TrafficAnalytics::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:TrafficAnalytics.TrafficAnalytics.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrafficAnalytics::release_timestamp() {
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficAnalytics::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:TrafficAnalytics.TrafficAnalytics.timestamp)
}

// required .TrafficAnalytics.TrafficAnalytics.LatitudeNS latitudens = 3;
bool TrafficAnalytics::has_latitudens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficAnalytics::set_has_latitudens() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficAnalytics::clear_has_latitudens() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficAnalytics::clear_latitudens() {
  latitudens_ = 0;
  clear_has_latitudens();
}
 ::TrafficAnalytics::TrafficAnalytics_LatitudeNS TrafficAnalytics::latitudens() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.latitudens)
  return static_cast< ::TrafficAnalytics::TrafficAnalytics_LatitudeNS >(latitudens_);
}
 void TrafficAnalytics::set_latitudens(::TrafficAnalytics::TrafficAnalytics_LatitudeNS value) {
  assert(::TrafficAnalytics::TrafficAnalytics_LatitudeNS_IsValid(value));
  set_has_latitudens();
  latitudens_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.latitudens)
}

// required double latitude = 4;
bool TrafficAnalytics::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficAnalytics::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficAnalytics::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficAnalytics::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double TrafficAnalytics::latitude() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.latitude)
  return latitude_;
}
 void TrafficAnalytics::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.latitude)
}

// required .TrafficAnalytics.TrafficAnalytics.longitudeEW longitudeew = 5;
bool TrafficAnalytics::has_longitudeew() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficAnalytics::set_has_longitudeew() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficAnalytics::clear_has_longitudeew() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficAnalytics::clear_longitudeew() {
  longitudeew_ = 0;
  clear_has_longitudeew();
}
 ::TrafficAnalytics::TrafficAnalytics_longitudeEW TrafficAnalytics::longitudeew() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.longitudeew)
  return static_cast< ::TrafficAnalytics::TrafficAnalytics_longitudeEW >(longitudeew_);
}
 void TrafficAnalytics::set_longitudeew(::TrafficAnalytics::TrafficAnalytics_longitudeEW value) {
  assert(::TrafficAnalytics::TrafficAnalytics_longitudeEW_IsValid(value));
  set_has_longitudeew();
  longitudeew_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.longitudeew)
}

// required double longitude = 6;
bool TrafficAnalytics::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficAnalytics::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficAnalytics::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficAnalytics::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double TrafficAnalytics::longitude() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.longitude)
  return longitude_;
}
 void TrafficAnalytics::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.longitude)
}

// required double density = 7;
bool TrafficAnalytics::has_density() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrafficAnalytics::set_has_density() {
  _has_bits_[0] |= 0x00000040u;
}
void TrafficAnalytics::clear_has_density() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrafficAnalytics::clear_density() {
  density_ = 0;
  clear_has_density();
}
 double TrafficAnalytics::density() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.density)
  return density_;
}
 void TrafficAnalytics::set_density(double value) {
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.density)
}

// required uint32 vehicle_speed_gps = 8;
bool TrafficAnalytics::has_vehicle_speed_gps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrafficAnalytics::set_has_vehicle_speed_gps() {
  _has_bits_[0] |= 0x00000080u;
}
void TrafficAnalytics::clear_has_vehicle_speed_gps() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrafficAnalytics::clear_vehicle_speed_gps() {
  vehicle_speed_gps_ = 0u;
  clear_has_vehicle_speed_gps();
}
 ::google::protobuf::uint32 TrafficAnalytics::vehicle_speed_gps() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.vehicle_speed_gps)
  return vehicle_speed_gps_;
}
 void TrafficAnalytics::set_vehicle_speed_gps(::google::protobuf::uint32 value) {
  set_has_vehicle_speed_gps();
  vehicle_speed_gps_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.vehicle_speed_gps)
}

// optional uint32 vehicle_speed_can = 9;
bool TrafficAnalytics::has_vehicle_speed_can() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrafficAnalytics::set_has_vehicle_speed_can() {
  _has_bits_[0] |= 0x00000100u;
}
void TrafficAnalytics::clear_has_vehicle_speed_can() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrafficAnalytics::clear_vehicle_speed_can() {
  vehicle_speed_can_ = 0u;
  clear_has_vehicle_speed_can();
}
 ::google::protobuf::uint32 TrafficAnalytics::vehicle_speed_can() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.vehicle_speed_can)
  return vehicle_speed_can_;
}
 void TrafficAnalytics::set_vehicle_speed_can(::google::protobuf::uint32 value) {
  set_has_vehicle_speed_can();
  vehicle_speed_can_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.vehicle_speed_can)
}

// optional uint32 fuel_level = 10;
bool TrafficAnalytics::has_fuel_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TrafficAnalytics::set_has_fuel_level() {
  _has_bits_[0] |= 0x00000200u;
}
void TrafficAnalytics::clear_has_fuel_level() {
  _has_bits_[0] &= ~0x00000200u;
}
void TrafficAnalytics::clear_fuel_level() {
  fuel_level_ = 0u;
  clear_has_fuel_level();
}
 ::google::protobuf::uint32 TrafficAnalytics::fuel_level() const {
  // @@protoc_insertion_point(field_get:TrafficAnalytics.TrafficAnalytics.fuel_level)
  return fuel_level_;
}
 void TrafficAnalytics::set_fuel_level(::google::protobuf::uint32 value) {
  set_has_fuel_level();
  fuel_level_ = value;
  // @@protoc_insertion_point(field_set:TrafficAnalytics.TrafficAnalytics.fuel_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace TrafficAnalytics

// @@protoc_insertion_point(global_scope)
